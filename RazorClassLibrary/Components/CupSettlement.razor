@page "/cupsettlement"
@layout MainLayout
@using Microsoft.AspNetCore.Components.Forms;
@using RazorClassLibrary.Data;

@using System.IO;
@using RazorClassLibrary.Model;
@using RazorClassLibrary.Shared;


@inject ISnackbar Snackbar
@inject IHttpRepo HttpRepo
<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
<MudProgressLinear Color="Color.Primary" Class="my-7" Indeterminate="_isMainLoading" />
<MudCard Elevation="4" Class="m-3">
    <MudCardContent>
        <br />
        <MudGrid Class="mb-1">
            <MudGrid Justify="Justify.FlexEnd" Class="mb-3 mr-3">
                <MudItem>
                    <MudSelect T="string" @bind-Value="@_defaultBranch" Label="Branch Code" Variant="Variant.Outlined" Dense="true">
                        <MudSelectItem T="string" Value="@("999")" />
                    </MudSelect>
                </MudItem>
                <MudItem>
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                        <ButtonTemplate>
                            <MudFab HtmlTag="label" Color="Color.Primary" Icon="@Icons.Filled.AttachFile" Label="@_filename" for="@context" />
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudItem>
                <MudItem>
                    <MudButton class="mt-3" Color="Color.Primary" Disabled="@_isPostLoading" Variant="Variant.Filled" OnClick="Post">
                        @if (_isPostLoading == false)
                        {
                            @("Post")
                        }
                        else
                        {
                            <MudProgressCircular Color="Color.Default" Style="height:27px;width:27px;" Indeterminate="true" />
                        }
                    </MudButton>
                </MudItem>
                <MudItem>
                    <MudButton class="mt-3" Color="Color.Error" Variant="Variant.Filled" OnClick="Clear">Clear</MudButton>
                </MudItem>
            </MudGrid>
        </MudGrid>
        <MudGrid>
            <MudItem Style="float: right">
                <MudCheckBox @bind-Checked="@_isChecked" Size="Size.Small" Color="Color.Primary">Filter empty amount</MudCheckBox>
            </MudItem>
        </MudGrid>
        <MudDivider DividerType="DividerType.FullWidth" /><MudDivider DividerType="DividerType.FullWidth" />
        <MudTable Elevation="0" Items="@_tableData" Dense="false" Hover="true" Bordered="true" Striped="true">
            <HeaderContent>
                <MudTh>InstitutionCode</MudTh>
                <MudTh>Sign</MudTh>
                <MudTh>KBZ Fees</MudTh>
                <MudTh>Sign</MudTh>
                <MudTh>Net Amount</MudTh>
                <MudTh>Sign</MudTh>
                <MudTh>Net Fees</MudTh>
                <MudTh>Sign</MudTh>
                <MudTh>Total Amount</MudTh>
                <MudTh>Currency</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="">@context.InstitutionCode</MudTd>
                <MudTd DataLabel="">@context.AcquirerFeeSign</MudTd>
                <MudTd DataLabel="">@context.AcquirerFee</MudTd>
                <MudTd DataLabel="">@context.NetAmountSign</MudTd>
                <MudTd DataLabel="">@context.NetAmount</MudTd>
                <MudTd DataLabel="">@context.NetFeeSign</MudTd>
                <MudTd DataLabel="">@context.NetFees</MudTd>
                <MudTd DataLabel="">@context.TotalNetAmountSign</MudTd>
                <MudTd DataLabel="">@context.TotalNetAmount</MudTd>
                <MudTd DataLabel="">

                    @if (context.Currency == "Undefined")
                    {
                        <MudText Color="Color.Error"><b>@context.Currency</b></MudText>
                    }
                    else
                    {
                        @context.Currency
                    }
                    @if (context.CurrencyStatus == "undefined")
                    {
                        <MudChip Disabled="true" Style="height: 20px;font-size:smaller" Color="Color.Error"> Not Exited in System</MudChip>
                    }
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>

@code {

    private readonly List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("CUP Settlement", href: null, disabled: true)
    };
    private string _filename = "Settlement File";
    string BranchCodeLovType = "BranchCode";
    string CcyCodeLovType = "CurrencyCode";
    private string _defaultBranch = "999";
    bool _isMainLoading;
    bool _isPostLoading;
    bool _isFiltered;
    bool _isChecked
    {
        get { return _isFiltered; }
        set { _isFiltered = value; Filter(value); }
    }
    private bool _isForbitPosting = false;
    public CupSettlementDto? SelectedItem1 = null;
    readonly List<CupSettlementDto> _model = new List<CupSettlementDto>();
    List<CupSettlementDto> _tableData = new List<CupSettlementDto>();

    protected override async Task OnInitializedAsync()
    {
    }

    private Task Clear()
    {
        _isPostLoading = false;
        _isChecked = false;
        _isMainLoading = false;
        _tableData.Clear();
        _filename = "Settlement File";

        return Task.CompletedTask;
    }

    private void Filter(bool value)
    {
        if (value)
        {
            _tableData = _tableData.Where(x => x.GrandTotal != 0).ToList();
        }
        else
        {
            _tableData = _model;
        }
    }

    private async Task Post()
    {
        if (_filename != "Settlement File")
        {
            if (_isForbitPosting)
            {
                Snackbar.Add($"Posting Settlements with incomplete data isn't allowed!", Severity.Error);
            }
            else
            {
                try
                {

                }
                catch
                {
                    Snackbar.Add($"Unexpected error occurred!", Severity.Error);
                }
                finally
                {
                    _isPostLoading = false;
                    _isMainLoading = false;
                }
            }
        }
        else
        {
            Snackbar.Add($"Please upload a file before posting!", Severity.Warning);
        }
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        _isChecked = false;
        if (!String.IsNullOrEmpty(Path.GetExtension(file.Name)))
        {
            Snackbar.Add($"Invalid File format!", Severity.Error);
            _model.Clear();
        }
        else
        {
            _isMainLoading = true;
            _filename = file.Name;
            var stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();
            var outputFileString = System.Text.Encoding.UTF8.GetString(ms.ToArray());
            if (!String.IsNullOrEmpty(outputFileString)) _model.Clear();
            try
            {
                foreach (var item in outputFileString.Split(Environment.NewLine))
                {
                    if (!String.IsNullOrEmpty(item))
                    {
                        _model.Add(new CupSettlementDto()
                            {
                                InstitutionCode = item[0..12].Trim(),
                                IssuerAmountSign = GetSign(item[12..13]),
                                IssuerAmount = GetRoundedAmount(item[13..33]),
                                AcquirerAmountSign = GetSign(item[54..55]),
                                AcquirerAmount = GetRoundedAmount(item[55..75]),
                                NetAmountSign = GetSign(item[96..97]),
                                NetAmount = GetRoundedAmount(item[97..117]),
                                IssuerFeeSign = GetSign(item[33..34]),
                                IssuerFee = GetRoundedAmount(item[34..54]),
                                AcquirerFeeSign = GetSign(item[75..76]),
                                AcquirerFee = GetRoundedAmount(item[76..96]),
                                NetFeeSign = GetSign(item[117..118]),
                                NetFees = GetRoundedAmount(item[118..138]),
                                TotalNetAmountSign = GetTotalNetAmountSign(GetSign(item[96..97]), GetRoundedAmount(item[97..117]), GetSign(item[117..118]), GetRoundedAmount(item[118..138])),
                                TotalNetAmount = GetTotalNetAmount(GetSign(item[96..97]), GetRoundedAmount(item[97..117]), GetSign(item[117..118]), GetRoundedAmount(item[118..138])),
                                CurrencyCode = item[202..205].Trim(),
                                Currency = "Undefined",
                                Status = "0",
                                TotalNoOfAcquirerTrans = item[160..199],
                                TotalNoOfissuerTrans = item[139..159],
                                BranchCode = _defaultBranch,
                                FileName = _filename,
                                GrandTotal = GetGandTotal(item[13..33], item[55..75], item[97..117], item[34..54], item[76..96], item[118..138])
                            });
                    }
                }
                _tableData = _model;
                _isMainLoading = false;

            }

            catch
            {
                _isMainLoading = false;
                Snackbar.Add($"Unexpected error occurred!", Severity.Error);
            }
        }
    }

    #region Extensions

    private double GetGandTotal(string IssuerAmount, string AcquirerAmount, string NetAmount, string IssuerFee, string AcquirerFee, string NetFees)
    {
        double IssuerAmt = double.Parse(IssuerAmount);
        double AcquirerAmt = double.Parse(AcquirerAmount);
        double NetAmt = double.Parse(NetAmount);
        double IssuerFees = double.Parse(IssuerFee);
        double AcquirerFees = double.Parse(AcquirerFee);
        double NetFee = double.Parse(NetFees);
        double result = IssuerAmt + AcquirerAmt + NetAmt + IssuerFees + AcquirerFees + NetAmt + NetFee;
        return result;
    }

    private string GetSign(string data)
    {
        if (data.TrimStart('0').PadLeft(1, '0').Equals("0"))
            return "C";
        else
            return data;
    }

    private string GetRoundedAmount(string data)
    {
        double dec = Math.Round(double.Parse(data), 2, MidpointRounding.AwayFromZero);
        return dec.ToString("N2");
    }

    private string GetTotalNetAmountSign(string netAmtSign, string netAmt, string netFeeSign, string netFees)
    {
        if (netAmtSign.Trim().Equals(netFeeSign.Trim()))
        {
            return netAmtSign;
        }
        else
        {
            if (double.Parse(netAmt) > double.Parse(netFees))
                return netAmtSign;
            else
                return netFeeSign;
        }
    }

    private string GetTotalNetAmount(string netAmtSign, string netAmt, string netFeeSign, string netFees)
    {
        double netAmount = double.Parse(netAmt);
        double netFee = double.Parse(netFees);
        if (netAmtSign.Trim().Equals(netFeeSign.Trim()))
        {
            var s = (netAmount + netFee).ToString("N2");
            return s;
        }
        else
        {
            string totalAmt;
            if (netAmount > netFee)
            {
                totalAmt = (netAmount - netFee).ToString("N2");
                return totalAmt;
            }
            else
            {
                totalAmt = (netFee - netAmount).ToString("N2");
                return totalAmt;
            }
        }
    }
    #endregion
}